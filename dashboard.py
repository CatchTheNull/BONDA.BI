import streamlit as st
import pandas as pd
import plotly.express as px
import time
import random

# –í–ê–ñ–ù–û: —Å—Ç–∞–≤–∏–º –ø–µ—Ä–≤—ã–º!
st.set_page_config(page_title="BONDA BI ‚Äì –û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º", layout="wide")

# --- –õ–û–ê–î–ï–†: –ª–æ–≥–æ—Ç–∏–ø + —Ñ—Ä–∞–∑—ã ---
def show_loader():
    phrases = [
        "üë®‚Äçüç≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–≤–∞—Ä–∞-–≥–µ–Ω–∏—è‚Ä¶",
        "üìà –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏ –∏–∑ —Å–æ—É—Å–∞ –¥–µ–º–∏–≥–ª–∞—Å‚Ä¶",
        "üí° –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–Ω—Å–∞–π—Ç—ã –∫–∞–∫ –≤ —Ç–æ–ø–æ–≤–æ–π —Ñ—Ä–∞–Ω—à–∏–∑–µ...",
        "ü•Ç –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ROI –¥–ª—è –±–æ–∫–∞–ª–∞ –ü—Ä–æ—Å–µ–∫–∫–æ‚Ä¶",
        "üß† –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –æ—á–µ–Ω—å —É–º–Ω—ã–º BI-–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º...",
        "üçΩÔ∏è –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–∑ Michelin‚Ä¶",
        "üí∞ –ú–æ–¥–µ–ª–∏—Ä—É–µ–º –≤—ã—Ä—É—á–∫—É —Å —É—á—ë—Ç–æ–º –æ—Ç–º–µ–Ω –∏ —á–∞–µ–≤—ã—Ö...",
        "üîç –°–∫–ª–∞–¥—ã–≤–∞–µ–º —á–µ–∫–∏ –∫–∞–∫ Lego‚Ä¶",
        "üìä –°–∏–º—É–ª–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏ –∫–∞—Å—Å–∏—Ä–∞ –≤ –º–æ–º–µ–Ω—Ç —Å–∫–∏–¥–∫–∏‚Ä¶",
    ]

    phrase = random.choice(phrases)

    st.markdown(f"""
        <style>
        .loader-wrapper {{
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            position: relative;
        }}
        .fade-text {{
            position: absolute;
            top: 15%;
            font-size: 1.3em;
            color: white;
            text-align: center;
            animation: fadeIn 1s ease-in-out forwards;
        }}
        .logo {{
            max-width: 300px;
            animation: fadeIn 1.2s ease-in-out forwards;
        }}
        .progress-bar {{
            position: absolute;
            top: 23%;
            width: 200px;
            height: 8px;
            background-color: #333;
            border-radius: 4px;
            overflow: hidden;
        }}
        .bar-fill {{
            height: 100%;
            background-color: #FF8C00;
            width: 0%;
            transition: width 1s;
        }}
        @keyframes fadeIn {{
            from {{ opacity: 0; }}
            to {{ opacity: 1; }}
        }}
        </style>

        <div class="loader-wrapper">
            <div class="fade-text">{phrase}</div>
            <div class="progress-bar"><div class="bar-fill" id="bar"></div></div>
            <img src="https://raw.githubusercontent.com/CatchTheNull/BONDA.BI/main/bonda-logo.png" class="logo">
        </div>

        <script>
        let i = 0;
        const fill = document.getElementById('bar');
        const interval = setInterval(() => {{
            i++;
            fill.style.width = (i * 20) + '%';
            if (i >= 5) clearInterval(interval);
        }}, 1000);
        </script>
    """, unsafe_allow_html=True)

    time.sleep(5)
# --- –ó–ê–ì–û–õ–û–í–û–ö ---
st.title("üìä BI-–î—ç—à–±–æ—Ä–¥ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º")

# --- –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê ---
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel OLAP –æ—Ç—á—ë—Ç", type=["xlsx"])
if uploaded_file:
    df = pd.read_excel(uploaded_file, skiprows=4)
    df = df[pd.to_datetime(df['–£—á–µ—Ç–Ω—ã–π –¥–µ–Ω—å'], errors='coerce').notna()]
    df = df[df['–¢–∏–ø –æ–ø–ª–∞—Ç—ã'].notna()]
    df.columns = ['date', 'restaurant', 'group', 'payment_type', 'amount', 'checks']
    df['date'] = pd.to_datetime(df['date']).dt.date
    df['amount'] = pd.to_numeric(df['amount'], errors='coerce')
    df['checks'] = pd.to_numeric(df['checks'], errors='coerce')

    # –§–ò–õ–¨–¢–†–´
    col1, col2 = st.columns(2)
    with col1:
        date_options = ["–í—Å–µ –¥–∞—Ç—ã"] + sorted(df['date'].unique())
        selected_date = st.selectbox("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", date_options)
    with col2:
        all_restaurants = ["–í—Å–µ —Ç–æ—á–∫–∏"] + sorted(df['restaurant'].unique())
        selected_restaurant = st.selectbox("üè™ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –ø—Ä–æ–¥–∞–∂", all_restaurants)

    # –§–ò–õ–¨–¢–†–ê–¶–ò–Ø
    if selected_date == "–í—Å–µ –¥–∞—Ç—ã":
        filtered = df.copy()
    else:
        filtered = df[df['date'] == selected_date]

    if selected_restaurant != "–í—Å–µ —Ç–æ—á–∫–∏":
        filtered = filtered[filtered['restaurant'] == selected_restaurant]

    # –î–ê–ù–ù–´–ï –î–õ–Ø –ì–†–ê–§–ò–ö–û–í
    total_sum = int(filtered['amount'].sum())
    pie_data = filtered.groupby('payment_type')['amount'].sum().reset_index()
    checks_data = filtered.groupby('restaurant')['checks'].sum().reset_index()
    revenue_data = filtered.groupby('restaurant')['amount'].sum().reset_index()

    # –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø
    st.markdown("### üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
    col1, col2, col3 = st.columns(3)

    with col1:
        st.subheader("üí≥ –¢–∏–ø—ã –æ–ø–ª–∞—Ç")
        fig = px.pie(pie_data, names='payment_type', values='amount', hole=0.5)
        fig.update_traces(textinfo='label+percent', hoverinfo="label+value")
        st.plotly_chart(fig, use_container_width=True)
        st.markdown(f"#### üí∞ {total_sum:,.0f} ‚ÇΩ")

    with col2:
        st.subheader("üßæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤")
        fig2 = px.bar(checks_data, x='restaurant', y='checks', text='checks', color='restaurant')
        fig2.update_layout(showlegend=False)
        st.plotly_chart(fig2, use_container_width=True)

    with col3:
        st.subheader("üè∑Ô∏è –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç–æ—á–∫–∞–º")
        fig3 = px.bar(revenue_data, x='restaurant', y='amount', text='amount', color='restaurant')
        fig3.update_layout(showlegend=False)
        st.plotly_chart(fig3, use_container_width=True)

    # –¢–ê–ë–õ–ò–¶–ê
    st.markdown("### üìÑ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–æ—á–∫–∞–º")
    detail = filtered.groupby('restaurant').agg({
        'amount': 'sum',
        'checks': 'sum'
    }).reset_index()

    def flag(row):
        flags = []
        if row['checks'] < 10:
            flags.append("–ú–∞–ª–æ —á–µ–∫–æ–≤")
        if row['amount'] < 100:
            flags.append("–ù–∏–∑–∫–∞—è –≤—ã—Ä—É—á–∫–∞")
        return ", ".join(flags) if flags else "-"

    detail['–§–ª–∞–≥–∏'] = detail.apply(flag, axis=1)
    detail['amount'] = detail['amount'].apply(lambda x: f"{int(x):,} ‚ÇΩ".replace(",", " "))

    st.dataframe(detail.rename(columns={
        'restaurant': '–¢–æ—á–∫–∞',
        'amount': '–í—ã—Ä—É—á–∫–∞',
        'checks': '–ß–µ–∫–∏'
    }), use_container_width=True)

    # –í–´–ì–†–£–ó–ö–ê
    st.download_button("üì• –í—ã–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ Excel", data=detail.to_csv(index=False).encode('utf-8'), file_name="report.csv", mime="text/csv")